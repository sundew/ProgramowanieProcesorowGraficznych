#version 330

in vec4 vVertex;
in vec3 vNormal;

uniform mat4x4 MVMatrix;
uniform mat4x4 MVPMatrix;
uniform mat3x3 normalMatrix;

uniform vec3 ambientLight;

struct pointLight{
	vec3 position; //eye space
	vec3 color;
	float attenuation0;
	float attenuation1;
	float attenuation2;
	float angle;
};

uniform pointLight light1;

struct materialProperties{
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
	float specularExponent;
};

uniform materialProperties material;


out vec4 vVaryingColor;

void main() {
	vec4 positionInEyeSpace4 = MVMatrix*vVertex;
	vec3 positionInEyeSpace3 = positionInEyeSpace4.xyz/positionInEyeSpace4.w;
	vec3 normalInEyeSpace = normalize(normalMatrix*vNormal);

	vec3 vLightDir = normalize(light1.position - positionInEyeSpace3);

	vVaryingColor.rgb = material.ambientColor;
	float diff = max(0.0, dot(normalInEyeSpace,vLightDir));
	vVaryingColor.rgb = diff*material.diffuseColor+light1.color;
	vVaryingColor.a = material.diffuseColor;

	gl_Position = MVMatrix*vVertex;
}